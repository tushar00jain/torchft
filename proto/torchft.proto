// Copyright (c) Meta Platforms, Inc. and affiliates.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

syntax = "proto3";
package torchft;

import "google/protobuf/timestamp.proto";

message RaftMessageRequest {
  // Request message contains the serialized Raft proto message.
  bytes message = 1;
}

message RaftMessageResponse {}

message NodeInfo {
  uint64 rank = 1;
  string address = 2;
}

message InfoRequest {
  NodeInfo requester = 1;
}

message InfoResponse {
  repeated NodeInfo peers = 1;
}

service CoordinatorService {
  rpc RaftMessage(RaftMessageRequest) returns (RaftMessageResponse);
  rpc Info(InfoRequest) returns (InfoResponse);
}

message QuorumMember {
  string replica_id = 1;
  string address = 2;
  string store_address = 3;
  int64 step = 4;
  uint64 world_size = 5;
  bool shrink_only = 6;
  int64 commit_failures = 8;
  // User passing in data stored as JSON string.
  string data = 7;
}

message Quorum {
  int64 quorum_id = 1;
  repeated QuorumMember participants = 2;
  google.protobuf.Timestamp created = 3;
}

message LighthouseQuorumRequest {
  QuorumMember requester = 1;
}

message LighthouseQuorumResponse {
  Quorum quorum = 1;
}

message LighthouseHeartbeatRequest {
  string replica_id = 1;
}

message LighthouseHeartbeatResponse {}

service LighthouseService {
  rpc Quorum(LighthouseQuorumRequest) returns (LighthouseQuorumResponse);
  rpc Heartbeat(LighthouseHeartbeatRequest)
      returns (LighthouseHeartbeatResponse);
}

message ManagerQuorumRequest {
  int64 group_rank = 1;
  int64 step = 2;
  string checkpoint_metadata = 3;
  bool shrink_only = 4;
  bool init_sync = 5;
  int64 commit_failures = 6;
}

message ManagerQuorumResponse {
  int64 quorum_id = 1;
  string recover_src_manager_address = 2;
  optional int64 recover_src_replica_rank = 3;
  repeated int64 recover_dst_replica_ranks = 4;
  string store_address = 5;
  // These are information for the replicas which are at the max step.
  int64 max_step = 6;
  optional int64 max_replica_rank = 7;
  int64 max_world_size = 8;
  // These are information for all replicas including behind replicas.
  int64 replica_rank = 9;
  int64 replica_world_size = 10;
  bool heal = 11;
  int64 commit_failures = 12;
}

message CheckpointMetadataRequest {
  int64 rank = 1;
}

message CheckpointMetadataResponse {
  string checkpoint_metadata = 1;
}

message ShouldCommitRequest {
  bool should_commit = 1;
  int64 group_rank = 2;
  int64 step = 3;
}
message ShouldCommitResponse {
  bool should_commit = 1;
}

message KillRequest {
  string msg = 1;
}
message KillResponse {}

service ManagerService {
  rpc Quorum(ManagerQuorumRequest) returns (ManagerQuorumResponse);
  rpc CheckpointMetadata(CheckpointMetadataRequest)
      returns (CheckpointMetadataResponse);
  rpc ShouldCommit(ShouldCommitRequest) returns (ShouldCommitResponse);
  rpc Kill(KillRequest) returns (KillResponse);
}
